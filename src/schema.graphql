type Query {
    ping: String!
    user: User!
    completedEvents(userId: ID): [Event!]!  # TODO
}

type Mutation {
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String, password: String, fbToken: String): AuthPayload
    createEvent(title: String!): Event!
    requestFriend(userId: ID!): String  # DONE
    confirmFriend(userId: ID!): String  # DONE
    updateEventDetails(eventId: ID!, title: String!): Event!  # TODO
    updateEventStatus(eventId: ID!, currentEventStatus: EventStatus!): Event!   # TODO


    verifyFbLogin(token: String!): String
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    ownedEvents: [Event!]!
    events(userId: ID, association: [Association!], status: [EventStatus!]): [Event!]!  # TODO
}

type Event {
    id: ID!
    title: String!
    owner: User!
    status: EventStatus!
    invited: [User!]!   # TODO
    joined: [User!]!    # TODO
}

enum EventStatus {
    SET
    LIT
    COMPLETED
}

enum Association {
    INVITED
    JOINED
    OWNER
}